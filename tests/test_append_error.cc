#include "signal_tl/fmt.hh"
#include "signal_tl/signal_tl.hh"

#include <fmt/format.h>

#include <catch2/catch_all.hpp>

namespace stl = signal_tl;
using namespace signal_tl::signal;
using signal_tl::ast::Expr;

namespace {
Expr get_phi() {
  auto theta1 = stl::Predicate("theta") <= 1.0;
  auto theta2 = stl::Predicate("theta") < 0.25;
  auto x_dot  = stl::Predicate("x_dot") < 0.25;
  auto x      = stl::Predicate("x") < 1;
  auto phi    = stl::Always(theta1 & x) & stl::Eventually(stl::Always(theta2 & x_dot));
  return phi;
}

Trace get_trace1() {
  auto t = std::vector<double>{0.0,  1.0,  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,  8.0,
                               9.0,  10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0,
                               18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0};

  auto theta = std::vector<double>{
      0.8072115182876587, 0.6253616213798523, 0.5759530067443848,  2.1681711673736572,
      1.3756893873214722, 3.254326105117798,  0.9760392904281616,  0.3995759189128876,
      0.4058665931224823, 1.9370567798614502, 0.19959034025669098, 1.7020440101623535,
      0.8671382069587708, 0.4280993342399597, 1.0938061475753784,  0.42080727219581604,
      2.25722336769104,   0.7912396192550659, 1.7364906072616577,  0.518024206161499,
      2.300281286239624,  1.2479541301727295, 0.377531498670578,   0.06242965906858444,
      0.49801141023635864};

  auto x = std::vector<double>{
      0.667906641960144,   0.4194730520248413,  0.058425962924957275,
      1.093833088874817,   1.294434666633606,   0.038136839866638184,
      0.8808276057243347,  0.4610064923763275,  0.6509886384010315,
      0.288589745759964,   1.0443519353866577,  0.847595751285553,
      0.5976979732513428,  1.4771767854690552,  1.362302303314209,
      0.2924133539199829,  0.6099613308906555,  0.8487048745155334,
      1.218008041381836,   0.46537500619888306, 0.5752330422401428,
      0.12523308396339417, 0.5752788186073303,  0.5430198907852173,
      1.007282853126525};

  auto x_dot =
      std::vector<double>{0.32892680168151855, 1.3858317136764526,   0.7090339660644531,
                          2.7325704097747803,  0.25496241450309753,  0.6217708587646484,
                          0.5633045434951782,  0.15813271701335907,  0.480469673871994,
                          1.7805505990982056,  0.016603171825408936, 0.6469761729240417,
                          0.37351396679878235, 2.1860337257385254,   1.4297616481781006,
                          0.37450167536735535, 1.1249395608901978,   0.9770298004150391,
                          0.46279963850975037, 1.7110997438430786,   0.2733519673347473,
                          1.7005544900894165,  1.4978992938995361,   0.2856500744819641,
                          1.3224234580993652};

  return Trace{{"theta", std::make_shared<Signal>(theta, t)},
               {"x", std::make_shared<Signal>(x, t)},
               {"x_dot", std::make_shared<Signal>(x_dot, t)}};
}

Trace get_trace2() {
  auto t = std::vector<double>{48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0,
                               57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0,
                               66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0};

  auto theta =
      std::vector<double>{0.44065698981285095, 0.5513322949409485,  0.5247364044189453,
                          0.43430134654045105, 0.32265782356262207, 0.5241603255271912,
                          0.469169020652771,   0.46336737275123596, 0.5579506754875183,
                          0.3699119985103607,  0.46935901045799255, 0.4902954399585724,
                          0.4584878087043762,  0.30844229459762573, 0.4374590218067169,
                          0.6623110175132751,  0.6576758027076721,  0.8176819682121277,
                          0.6190072894096375,  0.5651955604553223,  0.4377847909927368,
                          0.4374394118785858,  0.1870441734790802,  0.46698999404907227,
                          0.5973787903785706};

  auto x =
      std::vector<double>{0.45926108956336975, 0.5118712186813354,  0.5310275554656982,
                          0.5383917689323425,  0.5208474397659302,  0.44286447763442993,
                          0.524522602558136,   0.48844966292381287, 0.48231762647628784,
                          0.509438693523407,   0.4990404546260834,  0.5225937962532043,
                          0.49739140272140503, 0.557137131690979,   0.5001983642578125,
                          0.5057839155197144,  0.49534863233566284, 0.46751928329467773,
                          0.5088319778442383,  0.5121058821678162,  0.5232639312744141,
                          0.4922287166118622,  0.48807886242866516, 0.470917671918869,
                          0.46549665927886963};

  auto x_dot = std::vector<double>{
      0.057910606265068054, 0.5042053461074829, 1.0982192754745483,
      0.7265422940254211,   0.5069679617881775, 0.062289945781230927,
      1.1192792654037476,   0.564326822757721,  1.3101483583450317,
      0.05849301815032959,  1.1456730365753174, 0.24640771746635437,
      0.12858152389526367,  0.1601352095603943, 0.6358292698860168,
      0.7501578330993652,   0.8025932312011719, 0.09620770812034607,
      0.5078790783882141,   0.5271714925765991, 1.5782673358917236,
      0.4009734094142914,   0.8590595126152039, 0.824567973613739,
      0.5973787903785706};

  return Trace{{"theta", std::make_shared<Signal>(theta, t)},
               {"x", std::make_shared<Signal>(x, t)},
               {"x_dot", std::make_shared<Signal>(x_dot, t)}};
}

} // namespace

TEST_CASE(
    "Computing robustness does not mess up the timestamps",
    "[signal][robustness]") {
  const auto phi = get_phi();
  {
    const auto trace = get_trace1();

    REQUIRE_NOTHROW(stl::compute_robustness(phi, trace, true));
  }

  {
    const auto trace = get_trace2();

    REQUIRE_NOTHROW(stl::compute_robustness(phi, trace, true));
  }
}
